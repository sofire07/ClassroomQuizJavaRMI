/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.net.MalformedURLException;
import java.rmi.*;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CHRIS and Alexis 
 */

public class UserGUI extends JFrame {

    /**
     * Creates new form UserGUI
     */
    public UserGUI() {
        try {
            counted = new ArrayList();
            questionList = (QuestionRemote) Naming.lookup("//" + IPAddress + "/QuestionRemote");
            answerList = (AnswerList) Naming.lookup("//" + IPAddress + "/AnswerList");
			userList = (UserList) Naming.lookup("//" + IPAddress + "/UserList");
            initComponents();
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userTypeGroup = new javax.swing.ButtonGroup();
        noUserPane = new javax.swing.JOptionPane();
        studentFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        qTextArea = new javax.swing.JTextArea();
        mcRadio1 = new javax.swing.JRadioButton();
        mcRadio1.setVisible(false);
        mcRadio1.setActionCommand("A");
        mcRadio2 = new javax.swing.JRadioButton();
        mcRadio2.setVisible(false);
        mcRadio2.setActionCommand("B");
        mcRadio3 = new javax.swing.JRadioButton();
        mcRadio3.setVisible(false);
        mcRadio3.setActionCommand("C");
        mcRadio4 = new javax.swing.JRadioButton();
        mcRadio4.setVisible(false);
        mcRadio4.setActionCommand("D");
        jScrollPane2 = new javax.swing.JScrollPane();
        aTextArea = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        qLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        userListTable = new javax.swing.JTable();
        mcGroup = new javax.swing.ButtonGroup();
        instructorFrame = new javax.swing.JFrame();
        qtypeLabel = new javax.swing.JLabel();
        qtypeMcRadio = new javax.swing.JRadioButton();
        qtypeShortRadio = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        qTextArea2 = new javax.swing.JTextArea();
        qLabel2 = new javax.swing.JLabel();
        mcAnswer1 = new javax.swing.JTextField();
        mcAnswer2 = new javax.swing.JTextField();
        mcAnswer3 = new javax.swing.JTextField();
        mcAnswer4 = new javax.swing.JTextField();
        mcAnswerLabel1 = new javax.swing.JLabel();
        mcAnswerLabel2 = new javax.swing.JLabel();
        mcAnswerLabel3 = new javax.swing.JLabel();
        mcAnswerLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        aTextArea2 = new javax.swing.JTextArea();
        aLabel = new javax.swing.JLabel();
        qsubmitButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        userListTable1 = new javax.swing.JTable();
        qTypeGroup = new javax.swing.ButtonGroup();
        answerListFrame = new javax.swing.JFrame();
        jScrollPane7 = new javax.swing.JScrollPane();
        answerTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        correctNoLabel = new javax.swing.JLabel();
        incorrectNoLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        aNoLabel = new javax.swing.JLabel();
        bNoLabel = new javax.swing.JLabel();
        cNoLabel = new javax.swing.JLabel();
        dNoLabel = new javax.swing.JLabel();
        logoPic = new javax.swing.JLabel();
        userField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        studentRadio = new javax.swing.JRadioButton();
        instructorRadio = new javax.swing.JRadioButton();
        uLabel = new javax.swing.JLabel();
        pLabel = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();

        studentFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        studentFrame.setTitle("Student");
        studentFrame.setMinimumSize(new java.awt.Dimension(420, 250));
        studentFrame.setSize(new java.awt.Dimension(435, 300));
        studentFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                studentFrameWindowClosing(evt);
            }
        });

        qTextArea.setEditable(false);
        qTextArea.setColumns(20);
        qTextArea.setLineWrap(true);
        qTextArea.setRows(5);
        jScrollPane1.setViewportView(qTextArea);

        mcGroup.add(mcRadio1);
        mcRadio1.setText("Option 1");

        mcGroup.add(mcRadio2);
        mcRadio2.setText("Option 2");

        mcGroup.add(mcRadio3);
        mcRadio3.setText("Option 3");

        mcGroup.add(mcRadio4);
        mcRadio4.setText("Option 4");

        aTextArea.setColumns(20);
        aTextArea.setLineWrap(true);
        aTextArea.setRows(5);
        jScrollPane2.setViewportView(aTextArea);

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        qLabel.setText("Question:");

        userListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Users Online"
            }
        ));
        jScrollPane5.setViewportView(userListTable);

        javax.swing.GroupLayout studentFrameLayout = new javax.swing.GroupLayout(studentFrame.getContentPane());
        studentFrame.getContentPane().setLayout(studentFrameLayout);
        studentFrameLayout.setHorizontalGroup(
            studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentFrameLayout.createSequentialGroup()
                .addGroup(studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentFrameLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(studentFrameLayout.createSequentialGroup()
                                .addGroup(studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mcRadio1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mcRadio3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mcRadio4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mcRadio2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(submitButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentFrameLayout.createSequentialGroup()
                                .addComponent(qLabel)
                                .addGap(218, 218, 218))))
                    .addGroup(studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        studentFrameLayout.setVerticalGroup(
            studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentFrameLayout.createSequentialGroup()
                .addComponent(qLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(mcRadio1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mcRadio2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mcRadio3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mcRadio4)
                    .addComponent(submitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        instructorFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        instructorFrame.setTitle("Instructor");
        instructorFrame.setSize(new java.awt.Dimension(500, 350));
        instructorFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                instructorFrameWindowClosing(evt);
            }
        });

        qtypeLabel.setText("Question Type:");

        qTypeGroup.add(qtypeMcRadio);
        qtypeMcRadio.setText("Multiple Choice");
        qtypeMcRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtypeMcRadioActionPerformed(evt);
            }
        });

        qTypeGroup.add(qtypeShortRadio);
        qtypeShortRadio.setText("Short Answer");
        qtypeShortRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtypeShortRadioActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setHorizontalScrollBar(null);

        qTextArea2.setColumns(20);
        qTextArea2.setLineWrap(true);
        qTextArea2.setRows(5);
        jScrollPane3.setViewportView(qTextArea2);

        qLabel2.setText("Question:");

        mcAnswerLabel1.setText("A");

        mcAnswerLabel2.setText("B");

        mcAnswerLabel3.setText("C");

        mcAnswerLabel4.setText("D");

        aTextArea2.setColumns(20);
        aTextArea2.setRows(5);
        jScrollPane4.setViewportView(aTextArea2);

        aLabel.setText("Answer:");

        qsubmitButton.setText("Submit");
        qsubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qsubmitButtonActionPerformed(evt);
            }
        });

        userListTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Users Online"
            }
        ));
        jScrollPane6.setViewportView(userListTable1);

        javax.swing.GroupLayout instructorFrameLayout = new javax.swing.GroupLayout(instructorFrame.getContentPane());
        instructorFrame.getContentPane().setLayout(instructorFrameLayout);
        instructorFrameLayout.setHorizontalGroup(
            instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructorFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(instructorFrameLayout.createSequentialGroup()
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mcAnswerLabel1)
                            .addComponent(mcAnswerLabel2)
                            .addComponent(mcAnswerLabel3)
                            .addComponent(mcAnswerLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mcAnswer1)
                            .addComponent(mcAnswer2)
                            .addComponent(mcAnswer3)
                            .addComponent(mcAnswer4, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(qsubmitButton))
                    .addComponent(jScrollPane4)
                    .addGroup(instructorFrameLayout.createSequentialGroup()
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(instructorFrameLayout.createSequentialGroup()
                                .addComponent(qtypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qtypeMcRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qtypeShortRadio))
                            .addComponent(qLabel2)
                            .addComponent(aLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        instructorFrameLayout.setVerticalGroup(
            instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructorFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(instructorFrameLayout.createSequentialGroup()
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtypeLabel)
                            .addComponent(qtypeMcRadio)
                            .addComponent(qtypeShortRadio))
                        .addGap(1, 1, 1)
                        .addComponent(qLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mcAnswer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcAnswerLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mcAnswer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcAnswerLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mcAnswer3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcAnswerLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(instructorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mcAnswer4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcAnswerLabel4)
                            .addComponent(qsubmitButton))
                        .addGap(18, 18, 18)
                        .addComponent(aLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        answerListFrame.setTitle("Answers");
        answerListFrame.setMinimumSize(new java.awt.Dimension(375, 275));
        answerListFrame.setName("Answers"); // NOI18N
        answerListFrame.setSize(new java.awt.Dimension(514, 275));

        answerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Answer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(answerTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Results");

        jLabel2.setText("Correct:");

        jLabel3.setText("Incorrect:");

        correctNoLabel.setPreferredSize(new java.awt.Dimension(30, 14));

        incorrectNoLabel.setPreferredSize(new java.awt.Dimension(30, 14));

        jLabel4.setText("A:");

        jLabel5.setText("B:");

        jLabel6.setText("C:");

        jLabel7.setText("D:");

        aNoLabel.setPreferredSize(new java.awt.Dimension(30, 14));

        bNoLabel.setPreferredSize(new java.awt.Dimension(30, 14));

        cNoLabel.setPreferredSize(new java.awt.Dimension(30, 14));

        dNoLabel.setPreferredSize(new java.awt.Dimension(30, 14));

        javax.swing.GroupLayout answerListFrameLayout = new javax.swing.GroupLayout(answerListFrame.getContentPane());
        answerListFrame.getContentPane().setLayout(answerListFrameLayout);
        answerListFrameLayout.setHorizontalGroup(
            answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(answerListFrameLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(answerListFrameLayout.createSequentialGroup()
                        .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(answerListFrameLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(correctNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(answerListFrameLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(incorrectNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(aNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, answerListFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(32, 32, 32))))
        );
        answerListFrameLayout.setVerticalGroup(
            answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
            .addGroup(answerListFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(correctNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(incorrectNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(aNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(bNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(answerListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Classroom Quiz");

        logoPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buzzfeed-quiz.jpg"))); // NOI18N

        loginButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        loginButton.setText("LOGIN");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        registerButton.setForeground(new java.awt.Color(51, 51, 255));
        registerButton.setText("New User? Register");
        registerButton.setBorder(null);
        registerButton.setBorderPainted(false);
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        userTypeGroup.add(studentRadio);
        studentRadio.setText("Student");

        userTypeGroup.add(instructorRadio);
        instructorRadio.setText("Instructor");

        uLabel.setText("Username");

        pLabel.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(studentRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(instructorRadio)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(uLabel)
                            .addComponent(pLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(loginButton))
                            .addComponent(userField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logoPic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passField))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoPic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pLabel)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instructorRadio)
                    .addComponent(studentRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(registerButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    class userlistRefresh extends TimerTask {
                
                String un = "";
                boolean on = false;
                String ty = "";
                @Override
                public void run() {
                    try {
                        //updates the user table
                        //userList = (UserList) Naming.lookup("//" + IPAddress + "/UserList");
                        sList = userList.allUsers();
                        DefaultTableModel model = (DefaultTableModel) userListTable.getModel();
                        DefaultTableModel model1 = (DefaultTableModel) userListTable1.getModel();
                        model.setRowCount(0);
                        model1.setRowCount(0);
                    
                        for (int j = 0; j < sList.size(); j++) {
                            un = ((User) sList.elementAt(j)).getUserName();
                            on = ((User) sList.elementAt(j)).getOnline();
                            ty = ((User) sList.elementAt(j)).getType();
                            if (on == true) {
                                Object[] row = {ty+ ": " + un};
                                model.addRow(row);
                                model1.addRow(row);
                            }
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
    }
    
    class questionRefresh extends TimerTask {
       
        @Override
        public void run(){
            try {
                //set Radio buttons to invisible until question is available
                mcRadio1.setVisible(false);
                mcRadio2.setVisible(false);
                mcRadio3.setVisible(false);
                mcRadio4.setVisible(false);
                submitButton.setEnabled(false);
                qTextArea.setText("");
                
                //lookup questionlist
                //questionList = (QuestionRemote) Naming.lookup("//" + IPAddress + "/QuestionRemote");
                qList = questionList.question();
                
                //if a question is available, get the question type, question, multiple choice options, and correct answer
                if (!qList.isEmpty()){
					cancel();
                    Timer newTimer = new Timer();
                    newTimer.schedule(new questionRefresh(),15000,1000);
                    submitButton.setEnabled(true);
                    String type = ((Question) qList.elementAt(0)).getType();
                    String qst = ((Question) qList.elementAt(0)).getQuestion();
                    String[] ans = ((Question) qList.elementAt(0)).getAnswers();
                    String cor = ((Question) qList.elementAt(0)).getCorrect();
                    String a;
                    String b;
                    String c;
                    String d;
                    qTextArea.setText(qst);
                    
                    //if question type is multiple, set radio buttons to visible and set radio button text to answer choices
                    if (type.equals("Multiple")){
                        mcRadio1.setVisible(true);
                        mcRadio2.setVisible(true);
                        mcRadio3.setVisible(true);
                        mcRadio4.setVisible(true);
                        a = ans[0];
                        b = ans[1];
                        c = ans[2];
                        d = ans[3];
                        mcRadio1.setText(a);
                        mcRadio2.setText(b);
                        mcRadio3.setText(c);
                        mcRadio4.setText(d);
                    } else if (type.equals("Short")){
                        //if question type is short answer, set radio buttons to invisible
                        mcRadio1.setVisible(false);
                        mcRadio2.setVisible(false);
                        mcRadio3.setVisible(false);
                        mcRadio4.setVisible(false);
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
                   
        }
    }
    
    class answerTimer extends TimerTask {
        //clears the questionlist after the given amount of time
        @Override
        public void run(){
            try {
                questionList.clearQuestion();
            } catch (RemoteException ex) {
                Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }
    
    class answerlistRefresh extends TimerTask{
                String un = "";
                String an = "";
                boolean right;
                long start = System.currentTimeMillis();
                
                    
                @Override
                public void run(){
                    //cancel the answerlist refresh timer after the 15 second answer interval
                    if (System.currentTimeMillis() - start > 15000) {
                        cancel();
                        
                    } else {
                    try {                      
                        //lookup answerlist
                        //answerList = (AnswerList) Naming.lookup("//" + IPAddress + "/AnswerList");
                        aList = answerList.allAnswers();
                        DefaultTableModel model2 = (DefaultTableModel) answerTable.getModel();
                        model2.setRowCount(0);
                        
                        //update the answerlist table with the usernames and their answers
                        for (int k = 0; k < aList.size(); k++) {
                            un = ((Answer) aList.elementAt(k)).getUserName();
                            an = ((Answer) aList.elementAt(k)).getAnswer();
                            right = ((Answer) aList.elementAt(k)).getResult();
 
                            Object[] row = {un, an};
                            model2.addRow(row);
                            
                            //checks to see if the username has already been counted
                            if (!counted.contains(un)){
                                //if not, flag them as counted and check to see if their answer is right
                                counted.add(un);
                                if (right == true){
                                    //if answer is right, increment the right counter
                                    rcount++;
                                    //if answer is a, b, c, or d, increment the corresponding counter
                                    switch(an){
                                    case "A": acount++; break;
                                    case "B": bcount++; break;
                                    case "C": ccount++; break;
                                    case "D": dcount++; break;
                                    }
                                } else {
                                    //increment the corresponding counter 
                                    switch(an){
                                    case "A": acount++; break;
                                    case "B": bcount++; break;
                                    case "C": ccount++; break;
                                    case "D": dcount++; break;
                                    }
                                }
                            }
                        }
                        
                        //set right and wrong counter labels
                        correctNoLabel.setText(Integer.toString(rcount));
                        incorrectNoLabel.setText(Integer.toString(answerTable.getRowCount()-rcount));
                        
                        //set a, b, c, d answer count labels
                        aNoLabel.setText(Integer.toString(acount));
                        bNoLabel.setText(Integer.toString(bcount));
                        cNoLabel.setText(Integer.toString(ccount));
                        dNoLabel.setText(Integer.toString(dcount));
                                                
                    } catch (Exception ex) {
                        Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
    }
  
    public void studentFrameCreation(){
        //set student frame to visible and login frame invisible
        studentFrame.setVisible(true);
        setVisible(false);
        
        //create timers to refresh for new questions and userlist
        Timer userTimer = new Timer();
        Timer questionTimer = new Timer();
        userTimer.schedule(new userlistRefresh(), 0, 15000);
        questionTimer.schedule(new questionRefresh(), 0, 1000);
    }
    
    public void instructorFrameCreation(){
        //set instructor frame to visible and set login frame invisible
        instructorFrame.setVisible(true);
        setVisible(false);
        
        //create timer that refreshes userlist on frame
        Timer userTimer = new Timer();
        userTimer.schedule(new userlistRefresh(), 0, 15000);                
    }
    
    public void answerlistFrameCreation(){
        //create answerlist frame
        answerListFrame.setVisible(true);
        

        
        //start a timer that refreshes for new answers
        Timer answerTimer = new Timer();
        answerTimer.schedule(new answerlistRefresh(), 0, 1000);
    }
    
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed

        try {
            /*
            Goes through userlist until it finds the username given, assigns the variables username and password, and exits for loop
            If the username isn't found, tells the user that the username isn't registered
            Else, checks that password matches, if so it logs in, else tells the user incorrect password
             */
            iExists = false;
            uExists = false;
            //userList = (UserList) Naming.lookup("//" + IPAddress + "/UserList");
            sList = userList.allUsers();
            unEntry = userField.getText();
            passEntry = passField.getText();
            
            //check to see if another instructor is logged in
            for (int i = 0; i < sList.size(); i++) {
                type = ((User) sList.elementAt(i)).getType();
                online = ((User) sList.elementAt(i)).getOnline();
                if (type.equals("Instructor") && online == true){
                    iExists = true;
                    break;
                }
            }
            
            //check to see if user exists
            for (userListIndex = 0; userListIndex < sList.size(); userListIndex++) {
                username = ((User) sList.elementAt(userListIndex)).getUserName();
                password = ((User) sList.elementAt(userListIndex)).getPass();
                type = ((User) sList.elementAt(userListIndex)).getType();
                if (username.equalsIgnoreCase(unEntry)) {
                    uExists = true;
                    break;
                }
            }
            if (!uExists) {
                //if user doesn't exist give error message
                noUserPane.showMessageDialog(null, "No user with that name exists.",
                        "User doesn't exist",
                        noUserPane.ERROR_MESSAGE);
            } else {
                //if user does exist check if the entered password matches password in the userlist
                if (password.equals(passEntry)) {
                    //if password matches, update the userlist to set the users status to online
                    if (type.equals("Student")) {
                        userList.updateUser(userListIndex, unEntry, passEntry, type, true);
                        //if type equals instructor, create Student frame
                        studentFrameCreation();
                    } else if (type.equals("Instructor")){
                        if (iExists == true){
                            noUserPane.showMessageDialog(null, "Only one instructor may be logged in at any given time.",
                                "Another Instructor Online",
                                noUserPane.ERROR_MESSAGE);
                        } else{
                            //if type equals instructor, create Instructor frame
                            userList.updateUser(userListIndex, unEntry, passEntry, type, true);
                            instructorFrameCreation();
                        }
                         
                    }
                    } else {
                    //if entered password doesn't match the password in the userlist, give error message
                        noUserPane.showMessageDialog(null, "Incorrect password.",
                                "Incorrect Password",
                                noUserPane.ERROR_MESSAGE);
                    }
                }
            }catch (Exception ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        try {
           
            /*
            Goes through userlist and checks to see if given username already exists
            If username doesn't exist, creates a new user with username, password, type
            Else, states that username already registered.
             */
            iExists = false;
            uExists = false;
            //userList = (UserList) Naming.lookup("//" + IPAddress + "/UserList");
            sList = userList.allUsers();
            unEntry = userField.getText();
            passEntry = passField.getText();
            //userListIndex = 0;
            
            //if the user doesn't select a user type, give error message
            if (!studentRadio.isSelected() && !instructorRadio.isSelected()) {
                noUserPane.showMessageDialog(null, "You must select student or instructor.",
                        "Select Student or Instructor",
                        noUserPane.ERROR_MESSAGE);
            } else {
                //if the user selects student, set selection to student
                if (studentRadio.isSelected()) {
                    radioSelection = "Student";
                } else {
                    //if the user selects instructor, set selection to instructor
                    radioSelection = "Instructor";
                }
                //check to see if the username already exists, if so set uExists to true
                for (int i = 0; i < sList.size(); i++) {
                    username = ((User) sList.elementAt(i)).getUserName();
                    if (username.equalsIgnoreCase(unEntry)) {
                        uExists = true;
                        break;
                    }
                }
                //if username doesn't already exist create username with the entered username, password, selected type and set online to false
                if (!uExists) {
                    userList.newUser(unEntry, passEntry, radioSelection, false);
                    noUserPane.showMessageDialog(null, "User created and stored");
                } //if username does exist, give error message
                else {
                    noUserPane.showMessageDialog(null, "That username already exists. Choose a different username.",
                            "Username Already Exists",
                            noUserPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_registerButtonActionPerformed

    private void qtypeShortRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtypeShortRadioActionPerformed
        //if teacher selects short answer, hides all multiple choice elements
        mcAnswer1.setVisible(false);
        mcAnswerLabel1.setVisible(false);
        mcAnswer2.setVisible(false);
        mcAnswerLabel2.setVisible(false);
        mcAnswer3.setVisible(false);
        mcAnswerLabel3.setVisible(false);
        mcAnswer4.setVisible(false);
        mcAnswerLabel4.setVisible(false);
        aTextArea2.setText("");
        instructorFrame.setSize(new java.awt.Dimension(500, 250));
    }//GEN-LAST:event_qtypeShortRadioActionPerformed

    private void qtypeMcRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtypeMcRadioActionPerformed
        // if teacher selects multiple choice, sets all multiple choice elements to visible
        instructorFrame.setSize(new java.awt.Dimension(500, 350));
        mcAnswer1.setVisible(true);
        mcAnswer1.setText("");
        mcAnswerLabel1.setVisible(true);
        mcAnswer2.setVisible(true);
        mcAnswer2.setText("");
        mcAnswerLabel2.setVisible(true);
        mcAnswer3.setVisible(true);
        mcAnswer3.setText("");
        mcAnswerLabel3.setVisible(true);
        mcAnswer4.setVisible(true);
        mcAnswerLabel4.setVisible(true);
        mcAnswer4.setText("");
        aTextArea2.setText("");
        
    }//GEN-LAST:event_qtypeMcRadioActionPerformed

    private void instructorFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_instructorFrameWindowClosing
        try {
            // updates the current instructor to offline
            userList.updateUser(userListIndex, unEntry, passEntry, type, false);
            
            //clears the question
            questionList.clearQuestion();
            
            //clear answer list
            answerList.clearAnswers();
            
            //clear counted list
            counted.clear();
            
            //changes instructor exists variable to false
            iExists = false;
            //exits
            System.exit(0);
        } catch (RemoteException ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_instructorFrameWindowClosing

    private void studentFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_studentFrameWindowClosing
        try {
            // update current student to offline            
            userList.updateUser(userListIndex, unEntry, passEntry, type, false);
            
            //exits
            System.exit(0);
        } catch (RemoteException ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_studentFrameWindowClosing

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        try{    
        //retrieve question and get the correct answer
        //questionList = (QuestionRemote) Naming.lookup("//" + IPAddress + "/QuestionRemote");
        qList = questionList.question();
        String crt = ((Question) qList.elementAt(0)).getCorrect();
        //answerList = (AnswerList) Naming.lookup("//" + IPAddress + "/AnswerList");
        aList = answerList.allAnswers();
        boolean aCounted = false;
        
        for (int v=0; v<aList.size();v++){
            String n = ((Answer) aList.elementAt(v)).getUserName();
            if(unEntry.equals(n)){
                aCounted = true;
                break;
            }
        }
        
        if(!aCounted){
        //if it's a multiple choice question, get which radio button is selected
            if (mcRadio1.isVisible()){
                answer = mcGroup.getSelection().getActionCommand();
                //if the selected radio button = the correct answer, add answer to the answerlist with username, answer, and boolean showing answer is right
                if (answer.equals(crt)){
                    answerList.newAnswer(unEntry, answer, true);
                } else {
                    //if selected radio button != the correct answer, add answer to answerlist with username, answer, and boolean showin answer is wrong
                    answerList.newAnswer(unEntry, answer, false);
                }
            } else {
                //if not multiple choice, get short answer from text area and check if it = the correct answer,
                //then add a new answer to the answerlist with corresponding boolean
                answer = aTextArea.getText();
                if (answer.equalsIgnoreCase(crt)){
                    answerList.newAnswer(unEntry, answer, true);
                } else {
                answerList.newAnswer(unEntry, answer, false);
                }  
            }
            
        } else{
            noUserPane.showMessageDialog(null, "You already submitted an answer.",
                            "1 answer per user",
                            noUserPane.ERROR_MESSAGE);
        }
        }catch (Exception ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void qsubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qsubmitButtonActionPerformed
        try {
            // TODO add your handling code here:

            String mcAns1="";
            String mcAns2="";
            String mcAns3="";
            String mcAns4="";

            Timer qTimer = new Timer();
            rcount = 0;
            acount = 0;
            bcount = 0;
            ccount = 0;
            dcount = 0;
            
            //retrieve questionList
            //questionList = (QuestionRemote) Naming.lookup("//" + IPAddress + "/QuestionRemote");
            qList = questionList.question();
            //answerList = (AnswerList) Naming.lookup("//" + IPAddress + "/AnswerList");
            counted.clear();
            
            //if either question or answer text areas are empty, gives error message
            if (qTextArea2.getText().equals("") || aTextArea2.getText().equals("")){
                noUserPane.showMessageDialog(null, "Must enter the question and the correct answer.",
                        "Enter question and answer",
                        noUserPane.ERROR_MESSAGE);
            } else {
                //set question and answer variables
                teacherQuest = qTextArea2.getText();
                correct = aTextArea2.getText();
                //if multiple choice option is selected, sets question type to Multiple
                if (qtypeMcRadio.isSelected()){
                    qType = "Multiple";
                    //then checks to see if all of the multiple choice options are filled in, if not error message
                    if (mcAnswer1.getText().equals("") || mcAnswer2.getText().equals("") || mcAnswer3.getText().equals("") || mcAnswer4.getText().equals("")){
                        noUserPane.showMessageDialog(null, "You must fill out all options for multiple choice.",
                                "Fill Multiple Choice Options",
                                noUserPane.ERROR_MESSAGE);
                    //if they are, sets multiple choice options from multiple choice textfields    
                    } else {
                        correct ="";
                        mcAns1 = mcAnswer1.getText();
                        mcAns2 = mcAnswer2.getText();
                        mcAns3 = mcAnswer3.getText();
                        mcAns4 = mcAnswer4.getText();
                        
                        //if the answer given equals the first option or A, set the correct answer to A
                        if(aTextArea2.getText().equals(mcAns1) || aTextArea2.getText().equalsIgnoreCase("A")){
                            correct = "A";
                            //if the answer given equals the 2nd option or B, set the correct answer to B
                        } else if(aTextArea2.getText().equals(mcAns2) || aTextArea2.getText().equalsIgnoreCase("B")){
                            correct = "B";
                            //if the answer given equals the 3rd option or C, set the correct answer to C
                         } else if(aTextArea2.getText().equals(mcAns3) || aTextArea2.getText().equalsIgnoreCase("C")){
                             correct = "C";
                             //if the answer given equals the 4th option or D, set the correct answer to D
                         } else if(aTextArea2.getText().equals(mcAns4) || aTextArea2.getText().equals("D")){
                             correct = "D";
                         } else {
                             //if the answer given doesn't equal A,B,C,D or any of the text fields then it gives an error message
                             noUserPane.showMessageDialog(null, "The answer you provided doesn't match any of the choices",
                                "Answer doesn't match",
                                noUserPane.ERROR_MESSAGE);
                         }
                        if (!correct.equals("")){
                            try {
                            //if the question list is empty create a new question, if not update the question
                            if(qList.isEmpty()){
                            questionList.newQuestion(qType, teacherQuest, mcAns1, mcAns2, mcAns3, mcAns4, correct);
                            } else{
                            questionList.updateQuestion(qType, teacherQuest, mcAns1, mcAns2, mcAns3, mcAns4, correct);
                            }
                            //clears the answerlist
                            answerList.clearAnswers();
                            
                            //creates a new answerlist frame
                            answerlistFrameCreation();
                            
                            //starts a timer that gives students 15 seconds to answer the question
                            qTimer.schedule(new answerTimer(), 15000);
                        } catch (RemoteException ex) {
                            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                      }
                    }
                //if short answer question is selected, set question type to short
                } else if (qtypeShortRadio.isSelected()){
                    qType = "Short";
                    try {
                            //if the question list is empty create a new question, if not update the question
                            if(qList.isEmpty()){
                            questionList.newQuestion(qType, teacherQuest, mcAns1, mcAns2, mcAns3, mcAns4, correct);
                            } else{
                            questionList.updateQuestion(qType, teacherQuest, mcAns1, mcAns2, mcAns3, mcAns4, correct);
                            }
                            //clear answerlist and create new answerlist frame
                            answerList.clearAnswers();
                            answerlistFrameCreation();
                            
                            //start timer to give students 15 seconds to answer
                            qTimer.schedule(new answerTimer(), 15000);
                        } catch (RemoteException ex) {
                            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                } else {
                    //error message if question type radio isn't selected
                    noUserPane.showMessageDialog(null, "Must select question type.",
                            "Select Question Type",
                            noUserPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_qsubmitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
		IPAddress = args[0];
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        if (System.getSecurityManager() == null) {
            System.setSecurityManager(new SecurityManager());
        } else {
            System.out.println("Already has a security manager, so cant set RMI SM");
        }
        
        /* Create and display the form */
        // Look for UserList object on the server 
        // Get all users currently on the server 
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                    new UserGUI().setVisible(true);
                
            }
        });

    }

	static String IPAddress;
    UserList userList;
    QuestionRemote questionList;
    AnswerList answerList;
    Vector sList;
    Vector qList;
    Vector aList;
    
    boolean uExists = false;
    boolean iExists = false;
    
    String username;
    String password;
    String type;
    boolean online = false;
    int userListIndex = 0;
    
    String qType;
    String teacherQuest;
    String correct;
    
    String answer;
    
    String unEntry;
    String passEntry;
    String radioSelection;
    
    ArrayList<String> counted;
    
    int rcount;
    int acount;
    int bcount;
    int ccount;
    int dcount;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aLabel;
    private javax.swing.JLabel aNoLabel;
    private javax.swing.JTextArea aTextArea;
    private javax.swing.JTextArea aTextArea2;
    private javax.swing.JFrame answerListFrame;
    private javax.swing.JTable answerTable;
    private javax.swing.JLabel bNoLabel;
    private javax.swing.JLabel cNoLabel;
    private javax.swing.JLabel correctNoLabel;
    private javax.swing.JLabel dNoLabel;
    private javax.swing.JLabel incorrectNoLabel;
    private javax.swing.JFrame instructorFrame;
    private javax.swing.JRadioButton instructorRadio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel logoPic;
    private javax.swing.JTextField mcAnswer1;
    private javax.swing.JTextField mcAnswer2;
    private javax.swing.JTextField mcAnswer3;
    private javax.swing.JTextField mcAnswer4;
    private javax.swing.JLabel mcAnswerLabel1;
    private javax.swing.JLabel mcAnswerLabel2;
    private javax.swing.JLabel mcAnswerLabel3;
    private javax.swing.JLabel mcAnswerLabel4;
    private javax.swing.ButtonGroup mcGroup;
    private javax.swing.JRadioButton mcRadio1;
    private javax.swing.JRadioButton mcRadio2;
    private javax.swing.JRadioButton mcRadio3;
    private javax.swing.JRadioButton mcRadio4;
    private javax.swing.JOptionPane noUserPane;
    private javax.swing.JLabel pLabel;
    private javax.swing.JPasswordField passField;
    private javax.swing.JLabel qLabel;
    private javax.swing.JLabel qLabel2;
    private javax.swing.JTextArea qTextArea;
    private javax.swing.JTextArea qTextArea2;
    private javax.swing.ButtonGroup qTypeGroup;
    private javax.swing.JButton qsubmitButton;
    private javax.swing.JLabel qtypeLabel;
    private javax.swing.JRadioButton qtypeMcRadio;
    private javax.swing.JRadioButton qtypeShortRadio;
    private javax.swing.JButton registerButton;
    private javax.swing.JFrame studentFrame;
    private javax.swing.JRadioButton studentRadio;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel uLabel;
    private javax.swing.JTextField userField;
    private javax.swing.JTable userListTable;
    private javax.swing.JTable userListTable1;
    private javax.swing.ButtonGroup userTypeGroup;
    // End of variables declaration//GEN-END:variables
}
